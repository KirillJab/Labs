//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Programm.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
int sze = 0, capacity = 10;
Tool* shelf = (Tool*)malloc(20*sizeof*shelf);
Tool curtool;
int i;

__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{

}

void push(Tool tool)
{
	if(sze > capacity)
	{
		realloc(shelf, capacity * sizeof(class Tool));
		capacity *= 2;
	}
	shelf[i++] = tool;
}

void __fastcall TForm1::AddClick(TObject *Sender)
{
	wchar_t* temp;
	GroupName->GetTextBuf(curtool.groupName, GroupName->GetTextLen());
	Name->GetTextBuf(curtool.name, Name->GetTextLen());
	Color->GetTextBuf(curtool.color, Color->GetTextLen());
	curtool.available = Available->Text.ToInt();
    curtool.sold = Sold->Text.ToInt();
	if(Delivery->Text == "Yes")
	{
		curtool.delivery = true;
	}
	else
	{
		curtool.delivery = false;
	}
	push(curtool);
}

void __fastcall TForm1::LoadClick(TObject *Sender)
{



	TFileStream * tf = new TFileStream(OpenDialog1->FileName, fmOpenRead);
	TStringList * SL = new TStringList;
	SL->LoadFromStream(tf);
	for(int i = 0; i < SL->Count; i++)
	{
	st[i].Extraction(SL->Strings[i].c_str()); //мой метод
	Memo1->Lines->Add(st[i].string);
	}
	delete tf;







	if(OpenDialog1->Execute())
	{
		TFileStream* stream = new TFileStream(OpenDialog1->FileName, fmOpenRead);
		TStringList* list = new TStringList;
		list->LoadFromStream(stream);
        for(int i = 0; i < SL->Count; i++)
		{
			shelf[i].Extraction(SL->Strings[i].c_str()); //мой метод
			Memo->Lines->Add(list[i].c_str());
		}

		while(Memo->Lines->Strings[i] != "")
		{
			int j = 0;
			UnicodeString str = Memo->Lines->Strings[i];
			icu::UnicodeString str = icu::UnicodeString::fromUTF8(cases[test_case][0]);
			// Encoding
			std::string result;
			s.toUTF8String(result);


			while(str[j] != '\t')
			{
				curtool.groupName += str[j];
				j++;
			}
			j++;
			 /*
			while(str[j] != '\t')
			{
				curtool.name += str[j];
				j++;
			}
			j++;
			while(str[j] != '\t')
			{
				curtool.available *= 10;
				curtool.available += str[j] - '0';
				j++;
			}
			j++;
			while(str[j] != '\t')
			{
				curtool.sold *= 10;
				curtool.sold += str[j] - '0';
				j++;
			}
			j++;
			while(str[j] != '\t')
			{
				curtool.color += str[j];
				j++;
			}
			j++;
			string stryes;
			while(str[j] != '\0')
			{
				stryes += str[j];
			}
			if(stryes == "Yes")
			{
				curtool.delivery = true;
			}
			else
			{
				curtool.delivery = false;
			}
			*/
			i++;
		}
	}
}

void __fastcall TForm1::SaveClick(TObject *Sender)
{
	Memo->Lines->SaveToFile("Shelf.txt");
}






void printTool(Tool curtool)
{
	//Memo->Lines->Add(curtool.groupName>>curtool.nameext>>curtool.available<<" - - "<<curtool.sold<<" - - "<<curtool.color<<" - - "<<curtool.delivery);
}

